<?xml version="1.0"?>
<component name="org.nuxeo.elasticsearch.test.dynamic.mapping.contrib">

  <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent" point="elasticSearchLocal">
    <elasticSearchLocal clusterName="nuxeoTestClusterLocal" nodeName="nuxeoTestNode" indexStoreType="mmapfs"
      httpEnabled="true" />
  </extension>

  <!--<extension target="org.nuxeo.elasticsearch.ElasticSearchComponent" point="elasticSearchRemote">-->
  <!--<elasticSearchRemote clusterName="elasticsearch" addressList="localhost:9300" />-->
  <!--</extension>-->

  <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent" point="elasticSearchClientInitialization">
    <clientInitialization class="org.nuxeo.elasticsearch.client.ESTransportClientFactory" />
  </extension>

  <!-- custom writer to be used with the dynamic mapper -->
  <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent" point="elasticSearchDocWriter">
    <writer class="org.nuxeo.elasticsearch.test.CustomJsonESDocumentWriter" />
  </extension>

  <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent" point="elasticSearchIndex">
    <elasticSearchIndex name="nxutest" type="doc" repository="test">
      <settings>
        {
        "analysis" : {
        "filter" : {
        "en_stem_filter" : {
        "name" : "minimal_english",
        "type" : "stemmer"
        },
        "en_stop_filter" : {
        "stopwords" : [
        "_english_"
        ],
        "type" : "stop"
        },
        "word_delimiter_filter" : {
        "type" : "word_delimiter",
        "preserve_original" : true
        }
        },
        "tokenizer" : {
        "path_tokenizer" : {
        "delimiter" : "/",
        "type" : "path_hierarchy"
        }
        },
        "analyzer" : {
        "fulltext" : {
        "filter" : [
        "word_delimiter_filter",
        "lowercase",
        "en_stop_filter",
        "en_stem_filter",
        "asciifolding"
        ],
        "type" : "custom",
        "tokenizer" : "standard"
        },
        "path_analyzer" : {
        "type" : "custom",
        "tokenizer" : "path_tokenizer"
        },
        "lowercase_analyzer" : {
        "type" : "custom",
        "filter" : ["lowercase", "asciifolding"],
        "tokenizer" : "keyword"
        },
        "default" : {
        "type" : "custom",
        "tokenizer" : "keyword"
        }
        }
        }
        }
      </settings>
      <mapping>
        {
        "dynamic_templates": [
        {
        "dynamic_string": {
        "match": "*_string",
        "mapping": {
        "type": "text"
        }
        }
        },{
        "dynamic_int": {
        "match": "*_int",
        "mapping": {
        "type": "integer"
        }
        }
        },
        {
        "dynamic_date": {
        "match": "*_date",
        "mapping": {
        "format": "dateOptionalTime",
        "type": "date"
        }
        }
        }
        ],
        "_all" : {
        "analyzer" : "fulltext"
        },
        "properties" : {
        "dc:title" : {
        "type" : "text",
        "fields" : {
        "fulltext" : {
        "boost": 2,
        "type": "text",
        "analyzer" : "fulltext"
        }
        }
        },
        "dc:description" : {
        "type" : "text",
        "fields" : {
        "lowercase" : {
        "analyzer" : "lowercase_analyzer",
        "type" : "text"
        }
        }
        },
        "ecm:binarytext*" : {
        "type" : "text"
        },
        "ecm:path" : {
        "type" : "keyword",
        "fields" : {
        "children" : {
        "analyzer" : "path_analyzer",
        "search_analyzer" : "keyword",
        "type" : "text"
        },
        "ecm:path" : {
        "type" : "keyword"
        }
        }
        },
        "ecm:pos": {
        "type": "integer"
        },
        "dc:created": {
        "format": "dateOptionalTime",
        "type": "date"
        },
        "dc:modified": {
        "format": "dateOptionalTime",
        "type": "date"
        }
        }
        }
      </mapping>

    </elasticSearchIndex>

  </extension>

</component>
